1. main 문 변경
아래와 같이 main 문 변경을 초기에 해둔다

pp: API의 input, output 전후 출력

ppp: API의 ret이 ans와 같지 않을때 출력

어디서 틀렸는지 찾기 힘드니 틀린쪽에서만 print 하게 한다
__main__ 내부에서 선언된건 전역변수이다, testcase 에 따라 확인 가능

해당 TC에서의 qurey line idx를 더 직관적으로 확인 하기 위해

for q in range(Q): --> for q in range(1, Q+1):
로 변경
디버깅 하고 싶으면 아래와 같이 testcase 와 line 아이디를 조절해서 q = q 에 디버그 포인트를 잡아씀

파이참에 breakpoint를 잡을때 여러개 조건으로 하는게 안되어서 아래 꺼가 편하다
위에서 만든 pp, ppp 를 활용 하는 것
아래 q = q 에 브래이크 포인트를 잡는다
if testcase == 1 and q == 3:
    q = q
정답이 나오는 경향성을 봐서 어떻게 틀리는지 디버깅을 쉽게 코드를 짜는 연습을 해야함

답을 못찾겠다 싶으면 코드를 정리한다

꼼꼼하게 잘 살피는게 중요함, 구현 실수가 생각보다 많음, 조건이 빠진다던지

점수 내는곳이 독립적이라면:

구현이 덜 끝난곳의 채점 부분을 주석 처리하고, 만든 곳만 채점 기능을 살려 두고 한다
디버깅 범위를 좁히는게 중요함
실제 예시로 살펴보자

1.1 원본 main 문
import sys
from solution import init, addBeam, requireSingle, requireTwin

CMD_INIT = 100
CMD_ADD_BEAM = 200
CMD_REQUIRE_SINGLE = 300
CMD_REQUIRE_TWIN = 400


def run():
    Q = int(input())
    okay = False

    for q in range(Q):
        input_iter = iter(input().split())
        cmd = int(next(input_iter))
        if cmd == CMD_INIT:
            init()
            okay = True
        elif cmd == CMD_ADD_BEAM:
            mLength = int(next(input_iter))
            addBeam(mLength)
        elif cmd == CMD_REQUIRE_SINGLE:
            mHeight = int(next(input_iter))
            ret = requireSingle(mHeight)
            ans = int(next(input_iter))
            if ret != ans:
                okay = False
        elif cmd == CMD_REQUIRE_TWIN:
            mHeight = int(next(input_iter))
            ret = requireTwin(mHeight)
            ans = int(next(input_iter))
            if ret != ans:
                okay = False
        else:
            okay = False
    return okay


if __name__ == '__main__':
    sys.stdin = open('sample_input.txt', 'r')
    T, MARK = map(int, input().split())

    for tc in range(1, T + 1):
        score = MARK if run() else 0
        print("#%d %d" % (tc, score), flush=True)
output 예시
#1 0
#2 0
#3 0
#4 0
1.2 변경된 main 문
import sys
from solution import init, addBeam, requireSingle, requireTwin
from collections import defaultdict
import time

CMD_INIT = 100
CMD_ADD_BEAM = 200
CMD_REQUIRE_SINGLE = 300
CMD_REQUIRE_TWIN = 400

def pp(string, end="\n"):
    if tc == 3:
        print(string, end=end)

def ppp(string, end="\n"):
    if tc == 3:
        print(string, end=end)

def run():
    Q = int(input())
    okay = False

    for q in range(1, Q + 1):
        input_iter = iter(input().split())
        cmd = int(next(input_iter))

        if tc == 1 and q == 3:
            q = q

        if cmd == CMD_INIT:
            init()
            okay = True
        elif cmd == CMD_ADD_BEAM:
            s = time.time()
            mLength = int(next(input_iter))
            pp(f"[{q}] ADD_BEAM: mLength={mLength}")
            addBeam(mLength)
            API_infos["TIME_ADD_BEAM"] += time.time() - s
        elif cmd == CMD_REQUIRE_SINGLE:
            s = time.time()
            mHeight = int(next(input_iter))
            pp(f"[{q}] REQUIRE_SINGLED: mHeight={mHeight}", end=" ")
            ret = requireSingle(mHeight)
            ans = int(next(input_iter))
            pp(f"ret={ret}, ans={ans}")
            if ret != ans:
                ppp(f"[{q}] REQUIRE_SINGLED: mHeight={mHeight} || ret={ret}, ans={ans}")
                okay = False
            API_infos["TIME_REQUIRE_SINGLE"] += time.time() - s
        elif cmd == CMD_REQUIRE_TWIN:
            s = time.time()

            mHeight = int(next(input_iter))
            pp(f"[{q}] REQUIRE_TWIN: mHeight={mHeight}", end=" ")
            ret = requireTwin(mHeight)
            ans = int(next(input_iter))
            pp(f"ret={ret}, ans={ans}")
            if ret != ans:
                ppp(f"[{q}] REQUIRE_TWIN: mHeight={mHeight} || ret={ret}, ans={ans}")
                okay = False
            API_infos["TIME_REQUIRE_TWIN"] += time.time() - s
        else:
            okay = False
    return okay


if __name__ == '__main__':
    sys.stdin = open('sample_input.txt', 'r')
    T, MARK = map(int, input().split())
    total_start_time = time.time()
    API_infos = defaultdict(int)
    for tc in range(1, T + 1):
        tc_start_time = time.time()
        API_infos.clear()
        score = MARK if run() else 0
        print(f"#{tc} {score} {(time.time()-tc_start_time) * 1000:.2f}ms", flush=True)
        for indicator, value in API_infos.items():
            print(f"\t{indicator}={value*1000:.2f}ms")

    print(f"{(time.time() - total_start_time)*1000:.2f}ms")
output 예시
[29] REQUIRE_SINGLED: mHeight=48400999 ret=-1, ans=22216852
[29] REQUIRE_SINGLED: mHeight=48400999 || ret=-1, ans=22216852
[30] ADD_BEAM: mLength=793459
[31] ADD_BEAM: mLength=20629934
[32] REQUIRE_SINGLED: mHeight=41259868 ret=-1, ans=20629934
[32] REQUIRE_SINGLED: mHeight=41259868 || ret=-1, ans=20629934
[33] REQUIRE_TWIN: mHeight=47607540 ret=-1, ans=-1
#3 0 1.00ms
	TIME_REQUIRE_SINGLE=1.00ms
	TIME_ADD_BEAM=0.00ms
	TIME_REQUIRE_TWIN=0.00ms

< 중략 > 
#25 0 19.95ms
	TIME_ADD_BEAM=0.00ms
	TIME_REQUIRE_SINGLE=11.97ms
	TIME_REQUIRE_TWIN=0.00ms
158.57ms
2. pycharm run to cursor (ALT + F9) 활용